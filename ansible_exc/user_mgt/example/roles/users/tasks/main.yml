---
- name: Add group | create groups before adding user to group
  script: add_group.sh "{{ item.groups }}"
  when: item.groups is defined
  loop: "{{ users }}"
  loop_control:
    label: "username: {{item.username}}, groups: {{ item.groups if item.groups is defined else ''}}"


- name: Add users | create users, shell, home dirs
  user:
    name: "{{ item.username }}"
    password: "{{ item.password if item.password is defined else '!' }}"
    update_password: "{{ item.update_password if item.update_password is defined else default_update_password }}"
    groups: "{{ item.groups | default(omit) }}"
    shell: "{{ item.shell if item.shell is defined else default_shell }}"
    createhome: yes
    comment: "{{ item.comment if item.comment is defined else '' }}"
    state: present
  when: (item.user_state == 'present' or item.user_state == 'lock')
  loop: "{{ users }}"
  loop_control:
    label: "username: {{item.username}}, user_state: {{ item.user_state }}, password: {{ 'True' if item.password is defined else 'False' }}, update_password: {{ item.update_password if item.update_password is defined else default_update_password}}, groups: {{ item.groups if item.groups is defined else ''}}"
  register: user_output


- name: Add users | Unlock password login (set expiry to -1)
  user:
    name: "{{ item.username }}"
    expires: -1
  when: item.user_state == 'present'
  loop: "{{ users }}"
  loop_control:
    label: "username: {{item.username}}, user_state: {{ item.user_state }}"


- name: Lock users | Lock password & ssh key authentication
  user:
    name: "{{ item.username }}"
    expires: 0
  when: item.user_state == 'lock'
  loop: "{{ users }}"
  loop_control:
    label: "username: {{item.username}}, user_state: {{ item.user_state }}"


- name: Remove users
  user:
    name: "{{ item.username }}"
    state: absent
  when: item.user_state == 'absent'
  loop: "{{ users }}"
  loop_control:
    label: "username: {{item.username}}, user_state: {{ item.user_state }}"


- name: SSH Keys | Add authorized key for ssh key authentication
  authorized_key:
    user: "{{ item.username }}"
    key: "{{ item.ssh_key }}"
    exclusive: "{{ item.exclude_ssh_key if item.exclude_ssh_key is defined else 'no' }}"
    state: present
  when: item.ssh_key is defined and item.user_state == 'present'
  loop: "{{ users }}"
  loop_control:
    label: "username: {{item.username}}, ssh_key: {{ 'True' if item.ssh_key is defined else 'False' }}, exclude_ssh_key: {{ item.exclude_ssh_key if item.exclude_ssh_key is defined else 'False' }}"


- name: Sudo | Add to sudoers file and validate
  lineinfile:
    dest: /etc/sudoers
    state: present
    regexp: '^{{item.username}} '
    line: "{{ item.username }} ALL=(ALL) {{ 'NOPASSWD:' if ( item.use_sudo_nopass|d(false) )  else '' }}ALL"
    validate: 'visudo -cf %s'
  environment:
    PATH: /usr/sbin:/usr/local/sbin:/sbin
  when: item.use_sudo|d(false)|bool == true and item.user_state == 'present'
  loop: "{{ users }}"
  loop_control:
    label: "username: {{item.username}}, use_sudo: {{ item.use_sudo|d(false) }}, use_sudo_nopass: {{ item.use_sudo_nopass|d(false) }}"


- name: Sudo | Remove from sudoers file and validate
  lineinfile:
    dest: /etc/sudoers
    state: absent
    regexp: '^{{ item.username }} '
    line: '{{ item.username }}'
    validate: 'visudo -cf %s'
  environment:
    PATH: /usr/sbin:/usr/local/sbin:/sbin
  when: item.use_sudo|d(false)|bool == false or item.user_state == 'absent'
  loop: "{{ users }}"
  loop_control:
    label: "username: {{item.username}}, use_sudo: {{ item.use_sudo|d(false) }}, user_state: {{ item.user_state }}"

- include: internal.yml
